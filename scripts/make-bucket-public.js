require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://ajuoqvpccdkpzkefjrsc.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFqdW9xdnBjY2RrcHprZWZqcnNjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjIxOTM2NywiZXhwIjoyMDcxNzk1MzY3fQ.AkkgrulnJa6OtbjzYg_7wiRBL58FIWoxi-UCoKzGbeU'
);

async function makeBucketPublic() {
  console.log('üîß Tornando bucket PROTOCOLOS p√∫blico...\n');

  try {
    // 1. Verificar status atual do bucket
    console.log('üìã Verificando status atual...');
    const { data: buckets } = await supabase.storage.listBuckets();
    const protocolosBucket = buckets.find(bucket => bucket.name === 'PROTOCOLOS');
    
    if (!protocolosBucket) {
      console.error('‚ùå Bucket PROTOCOLOS n√£o encontrado!');
      return;
    }

    console.log(`üìä Status atual: ${protocolosBucket.public ? 'P√∫blico' : 'Privado'}`);

    if (protocolosBucket.public) {
      console.log('‚úÖ Bucket j√° est√° p√∫blico!');
      return;
    }

    // 2. Tentar tornar p√∫blico via API (pode n√£o funcionar com todas as vers√µes)
    console.log('üîß Tentando tornar p√∫blico via API...');
    
    // Nota: A API do Supabase pode n√£o permitir alterar bucket de privado para p√∫blico
    // Vamos tentar, mas provavelmente precisar√° ser feito manualmente
    
    try {
      // Esta opera√ß√£o pode n√£o estar dispon√≠vel na API atual
      const { error } = await supabase.storage.updateBucket('PROTOCOLOS', {
        public: true
      });

      if (error) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel alterar via API:', error.message);
        console.log('üìã SOLU√á√ÉO MANUAL NECESS√ÅRIA:');
        console.log('');
        console.log('üîó Acesse: https://supabase.com/dashboard/project/ajuoqvpccdkpzkefjrsc/storage/buckets');
        console.log('');
        console.log('üìù PASSOS:');
        console.log('1. Clique no bucket "PROTOCOLOS"');
        console.log('2. Clique em "Settings" (Configura√ß√µes)');
        console.log('3. Marque "Public bucket"');
        console.log('4. Clique em "Save" (Salvar)');
        console.log('');
        console.log('‚úÖ Ap√≥s isso, todos os arquivos ficar√£o p√∫blicos!');
      } else {
        console.log('‚úÖ Bucket tornado p√∫blico com sucesso!');
      }
    } catch (apiError) {
      console.log('‚ö†Ô∏è API n√£o suporta altera√ß√£o de bucket:', apiError.message);
      console.log('üìã SOLU√á√ÉO MANUAL NECESS√ÅRIA:');
      console.log('');
      console.log('üîó Acesse: https://supabase.com/dashboard/project/ajuoqvpccdkpzkefjrsc/storage/buckets');
      console.log('');
      console.log('üìù PASSOS:');
      console.log('1. Clique no bucket "PROTOCOLOS"');
      console.log('2. Clique em "Settings" (Configura√ß√µes)');
      console.log('3. Marque "Public bucket"');
      console.log('4. Clique em "Save" (Salvar)');
      console.log('');
      console.log('‚úÖ Ap√≥s isso, todos os arquivos ficar√£o p√∫blicos!');
    }

    // 3. Verificar se h√° pol√≠ticas RLS que precisam ser ajustadas
    console.log('\nüîí Verificando pol√≠ticas RLS...');
    
    // Tentar criar pol√≠tica p√∫blica se n√£o existir
    const { error: policyError } = await supabase.rpc('create_storage_policy', {
      bucket_name: 'PROTOCOLOS',
      policy_name: 'Public read access',
      policy_definition: 'true'
    });

    if (policyError) {
      console.log('‚ö†Ô∏è Pol√≠tica RLS precisa ser configurada manualmente');
      console.log('üìù POL√çTICA NECESS√ÅRIA:');
      console.log('- Tabela: storage.objects');
      console.log('- Opera√ß√£o: SELECT');
      console.log('- Defini√ß√£o: bucket_id = \'PROTOCOLOS\'');
      console.log('- P√∫blico: true');
    } else {
      console.log('‚úÖ Pol√≠tica RLS criada automaticamente!');
    }

    // 4. Testar ap√≥s configura√ß√£o manual
    console.log('\nüß™ Ap√≥s tornar p√∫blico, teste com:');
    console.log('node scripts/test-public-access.js');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

makeBucketPublic().catch(console.error);
