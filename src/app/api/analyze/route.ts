import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { searchAmazonProducts } from '../../../lib/amazon-api'
import { searchRealAmazonProducts } from '../../../lib/real-amazon-api'
import { generateIntelligentSearchTerms } from '../../../lib/intelligent-curation'
import { productService } from '../../../lib/supabase'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  organization: null,
})

// === FUN√á√ïES PARA GERAR PRODUTOS BASEADOS NO DIAGN√ìSTICO ===

// Fun√ß√£o para buscar produtos por categoria espec√≠fica
async function getProductsByCategory(categoryName: string): Promise<any[]> {
  console.log(`üîç Buscando produtos da categoria: ${categoryName}`)
  
  try {
    // Buscar produtos da categoria espec√≠fica no Supabase
    const products = await productService.getProductsByCategory(categoryName, true)
    
    if (products && products.length > 0) {
      console.log(`‚úÖ Encontrados ${products.length} produtos na categoria ${categoryName}`)
      
      // Converter para o formato esperado
      return products.slice(0, 3).map(product => ({
        name: product.name,
        description: product.description || `Produto ${categoryName} para sua sa√∫de`,
        asin: product.amazon_url?.split('/dp/')[1]?.split('?')[0] || product.id,
        price: product.current_price || '$29.99',
        rating: product.rating || 4.5,
        category: categoryName,
        benefits: product.benefits || [`Benef√≠cios para ${categoryName}`],
        amazonUrl: product.amazon_url || `https://meuportalfit.com/link/${product.id}`,
        detailPageURL: `/produtos/${categoryName}`, // Link para a categoria completa
        source: 'supabase-category',
        savings: Math.floor(Math.random() * 20) + 15,
        imageUrl: product.image_url || '',
        featured: false,
        shortUrl: `meuportalfit.com/produtos/${categoryName}`
      }))
    }
  } catch (error) {
    console.error(`‚ùå Erro ao buscar produtos da categoria ${categoryName}:`, error)
  }
  
  return []
}

function extractNeedsFromAnalysis(analysis: string): string[] {
  const needs: string[] = [];
  const analysisLower = analysis.toLowerCase();
  
  // Detectar necessidades baseadas no diagn√≥stico espec√≠fico
  if (analysisLower.includes('sono') || analysisLower.includes('sleep') || analysisLower.includes('dormir') || analysisLower.includes('ins√¥nia')) {
    needs.push('magnesium', 'melatonin');
  }
  if (analysisLower.includes('energia') || analysisLower.includes('energy') || analysisLower.includes('cansa√ßo') || analysisLower.includes('fatigue')) {
    needs.push('vitamin-d3', 'vitamin-b12');
  }
  if (analysisLower.includes('estresse') || analysisLower.includes('stress') || analysisLower.includes('ansiedade') || analysisLower.includes('anxiety')) {
    needs.push('ashwagandha', 'theanine');
  }
  if (analysisLower.includes('digest√£o') || analysisLower.includes('digestion') || analysisLower.includes('intestino') || analysisLower.includes('gut')) {
    needs.push('probiotics', 'digestive-enzymes');
  }
  if (analysisLower.includes('imunidade') || analysisLower.includes('immunity') || analysisLower.includes('gripe') || analysisLower.includes('cold')) {
    needs.push('vitamin-c', 'zinc');
  }
  if (analysisLower.includes('pele') || analysisLower.includes('skin') || analysisLower.includes('cabelo') || analysisLower.includes('hair')) {
    needs.push('collagen', 'biotin');
  }
  if (analysisLower.includes('inflama√ß√£o') || analysisLower.includes('inflammation') || analysisLower.includes('dores') || analysisLower.includes('pain')) {
    needs.push('omega-3', 'curcumin');
  }
  if (analysisLower.includes('vitamina d') || analysisLower.includes('vitamin d') || analysisLower.includes('sol')) {
    needs.push('vitamin-d3');
  }
  if (analysisLower.includes('magn√©sio') || analysisLower.includes('magnesium') || analysisLower.includes('relaxamento')) {
    needs.push('magnesium');
  }
  if (analysisLower.includes('b12') || analysisLower.includes('vitamina b') || analysisLower.includes('vitamin b')) {
    needs.push('vitamin-b12');
  }
  if (analysisLower.includes('ferro') || analysisLower.includes('iron') || analysisLower.includes('anemia')) {
    needs.push('iron');
  }
  if (analysisLower.includes('probi√≥tico') || analysisLower.includes('probiotic') || analysisLower.includes('bact√©ria')) {
    needs.push('probiotics');
  }
  if (analysisLower.includes('√¥mega') || analysisLower.includes('omega') || analysisLower.includes('peixe')) {
    needs.push('omega-3');
  }
  if (analysisLower.includes('col√°geno') || analysisLower.includes('collagen') || analysisLower.includes('articula√ß√£o')) {
    needs.push('collagen');
  }
  
  // Se n√£o detectou nada espec√≠fico, usar necessidades gerais baseadas no contexto
  if (needs.length === 0) {
    needs.push('multivitamin', 'vitamin-d3', 'magnesium');
  }
  
  return needs;
}

function generateProductsFromNeeds(needs: string[]): any[] {
  const productDatabase = {
    'vitamin-d3': {
      name: 'NOW Foods Vitamin D3 5000 IU',
      asin: 'B0013OULJ4',
      price: '$12.99',
      rating: 4.8,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ4',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: true,
      reviewCount: 15420,
      brand: 'NOW Foods',
      features: ['5000 IU Vitamin D3', 'Non-GMO', 'Gluten Free'],
      score: 85
    },
    'magnesium': {
      name: 'Thorne Magnesium Glycinate',
      asin: 'B0013OULJ5',
      price: '$18.99',
      rating: 4.9,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ5',
      isValid: true,
      isBestSeller: false,
      isAmazonChoice: true,
      reviewCount: 8920,
      brand: 'Thorne',
      features: ['Magnesium Glycinate', 'High Quality', 'Lab Tested'],
      score: 82
    },
    'melatonin': {
      name: 'Nature Made Melatonin 3mg',
      asin: 'B0013OULJ2',
      price: '$9.99',
      rating: 4.5,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ2',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: true,
      reviewCount: 12000,
      brand: 'Nature Made',
      features: ['3mg Melatonin', 'Natural Sleep Aid', 'Non-Habit Forming'],
      score: 88
    },
    'vitamin-b12': {
      name: 'Nature Made Vitamin B12',
      asin: 'B0013OULJ6',
      price: '$8.99',
      rating: 4.6,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ6',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: false,
      reviewCount: 12350,
      brand: 'Nature Made',
      features: ['Vitamin B12', 'Trusted Brand', 'Easy to Swallow'],
      score: 78
    },
    'ashwagandha': {
      name: 'Himalaya Ashwagandha',
      asin: 'B0013OULJ3',
      price: '$16.99',
      rating: 4.7,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ3',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: true,
      reviewCount: 6800,
      brand: 'Himalaya',
      features: ['Ashwagandha Extract', 'Stress Relief', 'Natural Adaptogen'],
      score: 86
    },
    'theanine': {
      name: 'NOW Foods L-Theanine',
      asin: 'B0013OULJ4',
      price: '$14.99',
      rating: 4.6,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ4',
      isValid: true,
      isBestSeller: false,
      isAmazonChoice: true,
      reviewCount: 4200,
      brand: 'NOW Foods',
      features: ['L-Theanine 200mg', 'Calm Focus', 'No Drowsiness'],
      score: 84
    },
    'probiotics': {
      name: 'Culturelle Daily Probiotic',
      asin: 'B0013OULJ8',
      price: '$22.99',
      rating: 4.7,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ8',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: true,
      reviewCount: 8900,
      brand: 'Culturelle',
      features: ['Daily Probiotic', 'Digestive Health', 'Immune Support'],
      score: 88
    },
    'digestive-enzymes': {
      name: 'Garden of Life Digestive Enzymes',
      asin: 'B0013OULJ5',
      price: '$19.99',
      rating: 4.5,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ5',
      isValid: true,
      isBestSeller: false,
      isAmazonChoice: true,
      reviewCount: 3200,
      brand: 'Garden of Life',
      features: ['Digestive Enzymes', 'Whole Food', 'Non-GMO'],
      score: 80
    },
    'vitamin-c': {
      name: 'Nature Made Vitamin C 1000mg',
      asin: 'B0013OULJ6',
      price: '$11.99',
      rating: 4.4,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ6',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: false,
      reviewCount: 9500,
      brand: 'Nature Made',
      features: ['1000mg Vitamin C', 'Immune Support', 'Antioxidant'],
      score: 82
    },
    'zinc': {
      name: 'NOW Foods Zinc 50mg',
      asin: 'B0013OULJ7',
      price: '$8.99',
      rating: 4.6,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ7',
      isValid: true,
      isBestSeller: false,
      isAmazonChoice: true,
      reviewCount: 2800,
      brand: 'NOW Foods',
      features: ['50mg Zinc', 'Immune Support', 'High Absorption'],
      score: 85
    },
    'collagen': {
      name: 'Vital Proteins Collagen Peptides',
      asin: 'B0013OULJ0',
      price: '$28.99',
      rating: 4.6,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ0',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: true,
      reviewCount: 15000,
      brand: 'Vital Proteins',
      features: ['Collagen Peptides', 'Skin Health', 'Joint Support'],
      score: 85
    },
    'biotin': {
      name: 'Nature Made Biotin 5000mcg',
      asin: 'B0013OULJ1',
      price: '$7.99',
      rating: 4.3,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ1',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: false,
      reviewCount: 12000,
      brand: 'Nature Made',
      features: ['5000mcg Biotin', 'Hair Growth', 'Nail Strength'],
      score: 80
    },
    'omega-3': {
      name: 'Nordic Naturals Omega-3',
      asin: 'B0013OULJ9',
      price: '$24.99',
      rating: 4.8,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ9',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: true,
      reviewCount: 12000,
      brand: 'Nordic Naturals',
      features: ['Omega-3', 'Heart Health', 'Brain Support'],
      score: 90
    },
    'curcumin': {
      name: 'NOW Foods Curcumin C3 Complex',
      asin: 'B0013OULJ2',
      price: '$18.99',
      rating: 4.7,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ2',
      isValid: true,
      isBestSeller: false,
      isAmazonChoice: true,
      reviewCount: 4500,
      brand: 'NOW Foods',
      features: ['Curcumin C3 Complex', 'Anti-Inflammatory', 'Joint Support'],
      score: 87
    },
    'iron': {
      name: 'Garden of Life Vitamin Code Raw Iron',
      asin: 'B0013OULJ7',
      price: '$15.99',
      rating: 4.5,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ7',
      isValid: true,
      isBestSeller: false,
      isAmazonChoice: true,
      reviewCount: 3200,
      brand: 'Garden of Life',
      features: ['Raw Iron', 'Whole Food', 'Non-GMO'],
      score: 80
    },
    'multivitamin': {
      name: 'Nature Made Multi Complete',
      asin: 'B0013OULJ1',
      price: '$19.99',
      rating: 4.4,
      imageUrl: 'https://m.media-amazon.com/images/I/71Q4Q4Q4Q4L._AC_SL1500_.jpg',
      detailPageURL: 'https://meuportalfit.com/link/B0013OULJ1',
      isValid: true,
      isBestSeller: true,
      isAmazonChoice: false,
      reviewCount: 8500,
      brand: 'Nature Made',
      features: ['Complete Multivitamin', 'Daily Support', 'Easy to Swallow'],
      score: 82
    }
  };
  
  // Gerar produtos baseados nas necessidades detectadas
  const products = needs.slice(0, 3).map(need => productDatabase[need as keyof typeof productDatabase]);
  
  // Se n√£o encontrou produtos espec√≠ficos, usar multivitamin como fallback
  if (products.length === 0) {
    return [productDatabase.multivitamin];
  }
  
  return products;
}

/**
 * Gera termos de busca inteligentes baseados na an√°lise
 * DEPRECATED: Agora usa generateIntelligentSearchTerms da curadoria inteligente
 */
function generateSmartSearchTerms(analysis: string): string[] {
  // Usar a nova fun√ß√£o de curadoria inteligente
  return generateIntelligentSearchTerms(analysis);
}

/**
 * Busca produtos de forma inteligente e adaptativa - SISTEMA H√çBRIDO
 * 1. Primeiro: Buscar produtos curados no Supabase baseados na an√°lise
 * 2. Fallback: Se n√£o encontrar suficientes, usar busca din√¢mica da Amazon
 */
async function searchProductsSmart(
  analysis: string,
  targetCount: number = 6
): Promise<unknown[]> {
  console.log('üéØ Iniciando busca h√≠brida inteligente...')
  
  let allProducts: unknown[] = []
  
  // === ETAPA 1: BUSCAR PRODUTOS CURADOS NO SUPABASE ===
  try {
    console.log('üì¶ Buscando produtos curados no Supabase...')
    const curatedProducts = await productService.getCuratedProductsByQuiz(analysis, targetCount)
    
    if (curatedProducts && curatedProducts.length > 0) {
      // Converter produtos do Supabase para o formato esperado
      const formattedProducts = curatedProducts.map(product => {
        // Extrair ASIN da URL do Amazon ou usar ID do produto
        const asin = product.amazon_url?.split('/dp/')[1]?.split('?')[0] || product.id
        
        // Criar link interno para o guia de produtos
        const internalLink = `/produtos/${product.category_id}/${product.slug || product.id}`
        
        return {
          name: product.name,
          asin: asin,
          price: product.current_price || '$29.99',
          rating: product.rating || 4.5,
          imageUrl: product.image_url || '',
          detailPageURL: internalLink, // Usar link interno em vez do Amazon
          amazonUrl: product.amazon_url, // Manter URL do Amazon para refer√™ncia
          isValid: true,
          isBestSeller: false,
          isAmazonChoice: false,
          reviewCount: product.review_count || 1000,
          brand: product.name.split(' ')[0] || 'Premium',
          features: product.features || [],
          benefits: product.benefits || [],
          description: product.description || '',
          score: product.priority_score || 75,
          scoreBreakdown: {
            brand: 20,
            nutrients: 15,
            price: 10,
            shipping: 10,
            penalties: 0
          },
          source: 'supabase-curated'
        }
      })
      
      allProducts.push(...formattedProducts)
      console.log(`‚úÖ Encontrados ${formattedProducts.length} produtos curados no Supabase`)
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao buscar produtos curados:', error instanceof Error ? error.message : String(error))
  }
  
  // === ETAPA 2: FALLBACK PARA BUSCA DIN√ÇMICA DA AMAZON ===
  // S√ì buscar na Amazon se n√£o tivermos produtos curados suficientes
  if (allProducts.length < targetCount) {
    console.log(`üîÑ Precisamos de mais produtos (temos ${allProducts.length}, queremos ${targetCount})`)
    console.log('üîç Iniciando busca din√¢mica na Amazon como fallback...')
    
    const remainingCount = targetCount - allProducts.length
    let searchAttempts = 0
    const maxAttempts = 15
    
    // Gerar termos de busca baseados na an√°lise
    const smartTerms = generateSmartSearchTerms(analysis)
    console.log(`üéØ Generated ${smartTerms.length} smart search terms`)
    
    // Buscar com termos inteligentes
    for (const term of smartTerms) {
      if (allProducts.length >= targetCount || searchAttempts >= maxAttempts) break
      
      searchAttempts++
      console.log(`üîç Searching [${searchAttempts}/${maxAttempts}]: "${term}"`)
      
      try {
        // Usar a nova API com curadoria inteligente
        const results = await searchRealAmazonProducts(term, 3)
        
        if (results && results.length > 0) {
          // Filtrar apenas produtos √∫nicos (por ASIN)
          const newProducts = results.filter(product => 
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            !allProducts.some((existing: any) => existing.asin === product.asin)
          )
          
          allProducts.push(...newProducts)
          console.log(`‚úÖ Found ${newProducts.length} unique products with intelligent curation (total: ${allProducts.length})`)
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Search error for "${term}":`, error instanceof Error ? error.message : String(error))
      }
    }
    
    // Se ainda n√£o tem produtos suficientes, buscar termos mais gen√©ricos
    if (allProducts.length < targetCount) {
      console.log(`üì¶ Need more products (have ${allProducts.length}, want ${targetCount})`)
      
      const genericTerms = [
        'bestseller supplement women',
        'vitamin women health',
        'natural supplement wellness',
        'daily vitamin pack women',
        'health supplement amazon choice'
      ]
      
      for (const term of genericTerms) {
        if (allProducts.length >= targetCount || searchAttempts >= maxAttempts) break
        
        searchAttempts++
        console.log(`üîÑ Generic search [${searchAttempts}/${maxAttempts}]: "${term}"`)
        
        try {
          const results = await searchRealAmazonProducts(term, 2)
          
          if (results && results.length > 0) {
            const newProducts = results.filter(product => 
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              !allProducts.some((existing: any) => existing.asin === product.asin)
            )
            
            allProducts.push(...newProducts)
            console.log(`‚úÖ Added ${newProducts.length} generic products (total: ${allProducts.length})`)
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Generic search error:`, error instanceof Error ? error.message : String(error))
        }
      }
    }
  }
  
  // === ETAPA 3: ORDENA√á√ÉO FINAL ===
  // Priorizar produtos curados do Supabase, depois produtos da Amazon
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  allProducts.sort((a: any, b: any) => {
    // 1. Priorizar produtos curados do Supabase
    if (a.source === 'supabase-curated' && b.source !== 'supabase-curated') return -1
    if (a.source !== 'supabase-curated' && b.source === 'supabase-curated') return 1
    
    // 2. Priorizar bestsellers
    if (a.isBestSeller && !b.isBestSeller) return -1
    if (!a.isBestSeller && b.isBestSeller) return 1
    
    // 3. Ordenar por rating
    return (b.rating || 4.0) - (a.rating || 4.0)
  })
  
  // Retornar apenas a quantidade desejada
  const finalProducts = allProducts.slice(0, targetCount)
  
  console.log(`üéâ Busca h√≠brida conclu√≠da: ${finalProducts.length} produtos`)
  console.log(`üìä Produtos curados: ${finalProducts.filter((p: any) => p.source === 'supabase-curated').length}`)
  console.log(`üìä Produtos Amazon: ${finalProducts.filter((p: any) => p.source !== 'supabase-curated').length}`)
  
  return finalProducts
}

/**
 * Gera descri√ß√£o personalizada do produto
 */
function generateProductDescription(productName: string, language: string): string {
  const name = productName.toLowerCase()
  
  if (language === 'pt') {
    if (name.includes('theanine')) return 'Amino√°cido natural para calma e foco sem sonol√™ncia'
    if (name.includes('ashwagandha')) return 'Adapt√≥geno poderoso para controle do estresse'
    if (name.includes('melatonin')) return 'Horm√¥nio natural do sono para melhor descanso'
    if (name.includes('magnesium')) return 'Mineral essencial para relaxamento e bem-estar'
    if (name.includes('vitamin d')) return 'Vitamina do sol para energia e imunidade'
    if (name.includes('b12') || name.includes('b-12')) return 'Vitamina B12 para energia sustent√°vel'
    if (name.includes('probiotic')) return 'Probi√≥ticos para sa√∫de digestiva e imunidade'
    if (name.includes('collagen')) return 'Col√°geno para pele, cabelo e unhas saud√°veis'
    if (name.includes('omega')) return '√îmega 3 para cora√ß√£o e c√©rebro saud√°veis'
    if (name.includes('biotin')) return 'Biotina para cabelo e unhas fortes'
    if (name.includes('iron')) return 'Ferro para energia e vitalidade feminina'
    if (name.includes('zinc')) return 'Zinco para imunidade e recupera√ß√£o'
    return 'Suplemento premium recomendado para seu perfil'
  }
  
  // Default em ingl√™s
  if (name.includes('theanine')) return 'Natural amino acid for calm and focus without drowsiness'
  if (name.includes('ashwagandha')) return 'Powerful adaptogen for stress management'
  if (name.includes('melatonin')) return 'Natural sleep hormone for better rest'
  if (name.includes('magnesium')) return 'Essential mineral for relaxation and wellness'
  if (name.includes('vitamin d')) return 'Sunshine vitamin for energy and immunity'
  if (name.includes('b12')) return 'Vitamin B12 for sustained energy'
  if (name.includes('probiotic')) return 'Probiotics for digestive health and immunity'
  if (name.includes('collagen')) return 'Collagen for healthy skin, hair and nails'
  return 'Premium supplement recommended for your profile'
}

/**
 * Identifica categoria do produto
 */
function identifyCategory(productName: string): string {
  const name = productName.toLowerCase()
  
  if (name.includes('vitamin') || name.includes('vitamina')) return 'Vitaminas'
  if (name.includes('magnesium') || name.includes('calcium') || name.includes('iron') || name.includes('zinc')) return 'Minerais'
  if (name.includes('ashwagandha') || name.includes('theanine') || name.includes('gaba')) return 'Ansiedade/Estresse'
  if (name.includes('melatonin') || name.includes('sleep') || name.includes('valerian')) return 'Sono'
  if (name.includes('probiotic') || name.includes('enzyme') || name.includes('fiber')) return 'Digest√£o'
  if (name.includes('collagen') || name.includes('biotin') || name.includes('hyaluronic')) return 'Beleza'
  if (name.includes('omega') || name.includes('fish oil')) return '√îmega 3'
  if (name.includes('protein') || name.includes('whey')) return 'Prote√≠na'
  
  return 'Bem-estar'
}

/**
 * Gera benef√≠cios do produto
 */
function generateBenefits(productName: string, language: string): string[] {
  const name = productName.toLowerCase()
  
  if (language === 'pt') {
    if (name.includes('theanine')) return ['Reduz ansiedade', 'Melhora foco', 'Sem sonol√™ncia']
    if (name.includes('ashwagandha')) return ['Controla cortisol', 'Energia sustent√°vel', 'Adapt√≥geno natural']
    if (name.includes('melatonin')) return ['Melhora qualidade do sono', 'Regula ciclo circadiano', '100% natural']
    if (name.includes('magnesium')) return ['Relaxamento muscular', 'Sono reparador', 'Anti-c√£ibras']
    if (name.includes('vitamin d')) return ['Mais energia', 'Sistema imune forte', 'Humor equilibrado']
    if (name.includes('b12')) return ['Energia o dia todo', 'Foco mental', 'Metabolismo ativo']
    if (name.includes('probiotic')) return ['Digest√£o saud√°vel', 'Imunidade forte', 'Bem-estar intestinal']
    if (name.includes('collagen')) return ['Pele firme', 'Cabelo brilhante', 'Unhas fortes']
    if (name.includes('omega')) return ['Cora√ß√£o saud√°vel', 'C√©rebro ativo', 'Anti-inflamat√≥rio']
    if (name.includes('biotin')) return ['Crescimento capilar', 'Unhas resistentes', 'Pele radiante']
    return ['Alta qualidade', 'Recomenda√ß√£o especializada', 'Resultados comprovados']
  }
  
  // Default em ingl√™s
  if (name.includes('theanine')) return ['Reduces anxiety', 'Improves focus', 'No drowsiness']
  if (name.includes('ashwagandha')) return ['Controls cortisol', 'Sustained energy', 'Natural adaptogen']
  if (name.includes('melatonin')) return ['Better sleep quality', 'Regulates circadian rhythm', '100% natural']
  if (name.includes('magnesium')) return ['Muscle relaxation', 'Restful sleep', 'Anti-cramp']
  if (name.includes('vitamin d')) return ['More energy', 'Strong immunity', 'Balanced mood']
  return ['High quality', 'Expert recommendation', 'Proven results']
}

export async function POST(request: NextRequest) {
  try {
    const { answers, language = 'pt', detailed, userName } = await request.json()
    
    if (!answers || (typeof answers !== 'object' && !Array.isArray(answers))) {
      console.error('‚ùå Respostas inv√°lidas:', answers)
      return NextResponse.json(
        { error: 'Respostas inv√°lidas' }, 
        { status: 400 }
      )
    }

    console.log('üìä Dados recebidos:', { answers, detailed })
    console.log('üîç Tipo de answers:', typeof answers)
    console.log('üîç √â array:', Array.isArray(answers))
    console.log('üîç Length:', Array.isArray(answers) ? answers.length : 'N/A')

    // An√°lise com Dra. Ana Slim (GPT-4o Mini)
    let analysis = ''
    
    try {
      console.log('ü§ñ Usando Dra. Ana Slim com GPT-4o Mini')

      const systemPrompt = `
      Voc√™ √© Dra. Ana Slim, nutricionista brasileira especialista em wellness para brasileiras e latinas que vivem nos EUA h√° 15+ anos.

      PERFIL: Especialista em medicina funcional, entende desafios √∫nicos do clima americano (inverno, ar seco, correria). Consultora de confian√ßa com linguagem calorosa e pr√≥xima.

      P√öBLICO: Mulheres brasileiras/latinas 25-50 anos nos EUA, or√ßamento $50-500/m√™s, querem solu√ß√µes pr√°ticas e produtos da Amazon USA.

      ESTILO: Tom acolhedor usando o nome da pessoa, m√°ximo 200 palavras, sempre explique o porqu√™, use emojis para deixar leve.

      FORMATO DE RESPOSTA OBRIGAT√ìRIO (sempre seguir exatamente):

      1. Acolhimento personalizado: "Ol√° [NOME]! üëã"
      2. Identifica√ß√£o do problema: 2-3 frases sobre os desafios espec√≠ficos baseados nas respostas
      3. Explica√ß√£o simples: O que est√° acontecendo no corpo/rotina baseado no perfil
      4. **Solu√ß√µes pr√°ticas:** (SEMPRE incluir esta se√ß√£o com 3-5 dicas espec√≠ficas)
      5. Encerramento motivacional: Mensagem de apoio variada e personalizada
      6. Call-to-action: "Que tal agendar uma avalia√ß√£o personalizada?"

      REGRAS CR√çTICAS:
      - SEMPRE usar o nome da pessoa no "Ol√° [NOME]! üëã"
      - NUNCA ultrapassar 200 palavras
      - SEMPRE incluir a se√ß√£o **Solu√ß√µes pr√°ticas:** com 3-5 dicas espec√≠ficas
      - Usar emojis estrat√©gicos (üåô, üíß, üåø, ‚ú®)
      - Explicar o porqu√™ de cada sugest√£o
      - Encerramento variado e motivacional
      - Sempre sugerir avalia√ß√£o personalizada
      - Foco em solu√ß√µes pr√°ticas e sustent√°veis
      - Linguagem calorosa mas profissional
      - PERSONALIZAR as orienta√ß√µes baseadas nas respostas espec√≠ficas da pessoa
      - N√ÉO usar orienta√ß√µes gen√©ricas - sempre adaptar ao perfil individual
      - Para solu√ß√µes pr√°ticas, use **texto em negrito** para os t√≠tulos (ex: **Inclua mais fibras**)
      - Use **O problema:** em negrito para destacar a se√ß√£o
      - Use **Solu√ß√µes pr√°ticas:** em negrito para destacar a se√ß√£o
      - ANALISAR as respostas espec√≠ficas para identificar necessidades √∫nicas
      - CRIAR orienta√ß√µes espec√≠ficas baseadas no que a pessoa respondeu
      - EVITAR orienta√ß√µes gen√©ricas que servem para qualquer pessoa
      - OBRIGAT√ìRIO: Sempre terminar com a se√ß√£o **Solu√ß√µes pr√°ticas:** seguida de 3-5 dicas espec√≠ficas

      EXEMPLO DE PERSONALIZA√á√ÉO:
      Se a pessoa respondeu sobre problemas de sono ‚Üí focar em melatonina, magn√©sio, rotina noturna
      Se a pessoa respondeu sobre energia ‚Üí focar em vitamina D, B12, prote√≠na, exerc√≠cios
      Se a pessoa respondeu sobre digest√£o ‚Üí focar em probi√≥ticos, fibras, √°gua, enzimas
      Se a pessoa respondeu sobre estresse ‚Üí focar em ashwagandha, theanine, medita√ß√£o
      Se a pessoa respondeu sobre imunidade ‚Üí focar em vitamina C, zinco, sono, exerc√≠cios

      EXEMPLO:
      "Ol√° [NOME]! üëã Vejo que voc√™ est√° enfrentando desafios com energia e sono. Isso √© comum para n√≥s brasileiras no clima americano.

      üåô **O problema:** Seu corpo est√° desregulado pelo hor√°rio irregular e falta de nutrientes essenciais.

      ‚ú® **Solu√ß√µes pr√°ticas:**
      - **Tome sol 15 minutos por dia** para regular o ciclo
      - **Inclua mais prote√≠na** no caf√© da manh√£
      - **Estabele√ßa um hor√°rio fixo** para dormir

      Voc√™ merece se sentir renovada e cheia de energia! Estou aqui para te apoiar nessa jornada.

      Que tal agendar uma avalia√ß√£o personalizada?"
      `;

      // Detectar g√™nero baseado no nome (se fornecido)
      const detectGender = (name: string): 'masculino' | 'feminino' | 'neutro' => {
        if (!name) return 'neutro'
        
        const maleNames = ['andre', 'andr√©', 'carlos', 'jo√£o', 'pedro', 'rafael', 'lucas', 'bruno', 'felipe', 'gabriel', 'daniel', 'marcos', 'antonio', 'ricardo', 'rodrigo', 'miguel', 'diego', 'alexandre', 'leonardo', 'thiago']
        const femaleNames = ['ana', 'maria', 'julia', 'fernanda', 'camila', 'bruna', 'carolina', 'beatriz', 'laura', 'sophia', 'isabella', 'valentina', 'manuela', 'alice', 'helena', 'luiza', 'giovanna', 'mariana', 'nicole', 'rafaella']
        
        const nameLower = name.toLowerCase().trim()
        
        if (maleNames.some(n => nameLower.includes(n))) return 'masculino'
        if (femaleNames.some(n => nameLower.includes(n))) return 'feminino'
        return 'neutro'
      }

      const gender = detectGender(userName || '')
      const greeting = `Ol√°, ${userName}!`
      const pronoun = gender === 'masculino' ? 'voc√™' : gender === 'feminino' ? 'voc√™' : 'voc√™'
      const possessive = gender === 'masculino' ? 'seu' : gender === 'feminino' ? 'sua' : 'seu'

      const userMessage = `
      Ol√° Dra. Ana Slim! Aqui est√£o os dados de uma nova avalia√ß√£o:

      Nome do usu√°rio: ${userName || 'N√£o fornecido'} (G√™nero detectado: ${gender})
      Sauda√ß√£o apropriada: ${greeting}
      Pronome: ${pronoun}
      Possessivo: ${possessive}

      Respostas do quiz (0=primeira op√ß√£o, 1=segunda, etc):
      ${JSON.stringify(answers)}
      
      ${detailed ? `
      Dados detalhados adicionais:
      - Hor√°rio de acordar: ${detailed.wakeUpTime || 'N√£o informado'}
      - Hor√°rio de dormir: ${detailed.sleepTime || 'N√£o informado'}
      - Qualidade do sono: ${detailed.sleepQuality || 'N√£o informado'}
      - Principal preocupa√ß√£o: ${detailed.mainConcern || 'N√£o informado'}
      - √Åreas de melhoria: ${detailed.improvementAreas?.join(', ') || 'N√£o informado'}
      - Usa medicamentos: ${detailed.usesMedication || 'N√£o informado'} ${detailed.medicationDetails ? `(${detailed.medicationDetails})` : ''}
      - Altera√ß√µes na sa√∫de: ${detailed.healthIssues || 'N√£o informado'} ${detailed.healthIssuesDetails ? `(${detailed.healthIssuesDetails})` : ''}
      - Restri√ß√µes alimentares: ${detailed.foodRestrictions || 'N√£o informado'} ${detailed.foodRestrictionsDetails ? `(${detailed.foodRestrictionsDetails})` : ''}
      - Usa suplementos: ${detailed.usesSupplements || 'N√£o informado'} ${detailed.supplementsDetails ? `(${detailed.supplementsDetails})` : ''}
      ` : ''}

      IMPORTANTE: Use a sauda√ß√£o "${greeting}" e adapte sua linguagem ao g√™nero detectado (${gender}).
      Use "${pronoun}" como pronome e "${possessive}" como possessivo.
      
      Por favor, forne√ßa uma an√°lise personalizada e espec√≠fica, mencionando produtos espec√≠ficos mas SEM incluir links da Amazon.
      Responda em ${language === 'pt' ? 'portugu√™s brasileiro' : language === 'es' ? 'espanhol' : 'ingl√™s'}.
      `

      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage }
        ],
        max_tokens: 400,
        temperature: 0.7
      })

      analysis = completion.choices[0]?.message?.content || ''
      console.log('‚úÖ Dra. Ana Slim respondeu:', analysis.substring(0, 100) + '...')
      
    } catch (error) {
      console.error('‚ùå Erro na Dra. Ana Slim:', error)
      console.warn('‚ö†Ô∏è Dra. Ana Slim falhou, usando an√°lise de fallback')
      
      // An√°lise de fallback baseada nas respostas - estilo Dra. Ana Slim
      const healthChallenge = answers[1] || 0
      const energyLevel = answers[2] || 0
      const sleepQuality = answers[4] || 0
      
      // Detectar g√™nero para fallback tamb√©m
      const detectGenderFallback = (name: string): 'masculino' | 'feminino' | 'neutro' => {
        if (!name) return 'neutro'
        const maleNames = ['andre', 'andr√©', 'carlos', 'jo√£o', 'pedro', 'rafael', 'lucas', 'bruno', 'felipe', 'gabriel', 'daniel', 'marcos', 'antonio', 'ricardo', 'rodrigo', 'miguel', 'diego', 'alexandre', 'leonardo', 'thiago']
        const femaleNames = ['ana', 'maria', 'julia', 'fernanda', 'camila', 'bruna', 'carolina', 'beatriz', 'laura', 'sophia', 'isabella', 'valentina', 'manuela', 'alice', 'helena', 'luiza', 'giovanna', 'mariana', 'nicole', 'rafaella']
        const nameLower = name.toLowerCase().trim()
        if (maleNames.some(n => nameLower.includes(n))) return 'masculino'
        if (femaleNames.some(n => nameLower.includes(n))) return 'feminino'
        return 'neutro'
      }
      
      const genderFallback = detectGenderFallback(userName || '')
      const greetingFallback = `Ol√°, ${userName}!`
      const pronounFallback = genderFallback === 'masculino' ? 'voc√™' : genderFallback === 'feminino' ? 'voc√™' : 'voc√™'
      const groupFallback = genderFallback === 'masculino' ? 'brasileiros' : genderFallback === 'feminino' ? 'brasileiras' : 'brasileiros'
      
      if (language === 'pt') {
        if (healthChallenge === 0 || energyLevel < 3) {
          analysis = `${greetingFallback} vejo que ${pronounFallback} est√° enfrentando aquela fadiga t√≠pica de quem vive nos EUA - super comum entre n√≥s ${groupFallback}! O ritmo acelerado aqui, combinado com menos sol que no Brasil, cria uma defici√™ncia energ√©tica real. ${pronounFallback} precisa de vitamina B12 metilcobalamina para energia sustent√°vel, vitamina D3 5000IU (essencial no clima americano), e ferro quelato se houver defici√™ncia. Magn√©sio glicinato tamb√©m ajuda muito com energia e qualidade do sono. O clima seco aqui afeta nossa absor√ß√£o de nutrientes, ent√£o suplementa√ß√£o de qualidade √© fundamental.`
        } else if (healthChallenge === 1) {
          analysis = `${greetingFallback} reconhe√ßo esse padr√£o de ansiedade e estresse - muitos de n√≥s ${groupFallback} passamos por isso aqui! A press√£o do dia a dia nos EUA √© intensa e diferente do Brasil. ${pronounFallback} precisa de L-teanina 200mg para calma sem sonol√™ncia, magn√©sio glicinato para relaxamento muscular profundo, e adapt√≥genos como ashwagandha KSM-66 para equilibrar o cortisol. √îmega 3 EPA/DHA tamb√©m ajuda muito com o equil√≠brio emocional. O estresse cr√¥nico aqui esgota nossos estoques de magn√©sio rapidamente.`
        } else if (healthChallenge === 2 || sleepQuality < 3) {
          analysis = `${greetingFallback} problemas de sono s√£o t√£o comuns entre ${groupFallback} nos EUA! O clima seco, mudan√ßa de hor√°rio e estresse afetam muito nosso ciclo circadiano. ${pronounFallback} precisa de melatonina de libera√ß√£o prolongada para regular o ciclo natural, magn√©sio glicinato para relaxamento muscular profundo, e L-triptofano para produ√ß√£o natural de serotonina. Vitamina D3 tamb√©m ajuda a regular o ciclo circadiano. O ar seco aqui desidrata nosso corpo e afeta a qualidade do sono.`
        } else {
          analysis = `Pelo ${pronounFallback} perfil, vejo que ${pronounFallback} busca manter ${pronounFallback === 'voc√™' ? 'sua' : 'sua'} sa√∫de em dia - parab√©ns! Para ${groupFallback} como n√≥s nos EUA, √© essencial manter n√≠veis adequados de vitamina D3 2000IU (especialmente no inverno), complexo B metilado para energia, probi√≥ticos 50 bilh√µes CFU para sa√∫de digestiva (a dieta americana afeta muito nosso microbioma!), e √¥mega 3 EPA/DHA para sa√∫de geral. Um bom multivitam√≠nico com minerais quelatos tamb√©m faz diferen√ßa na absor√ß√£o.`
        }
      } else {
        analysis = "Based on your responses, I can see you're dealing with common wellness challenges many of us face in the USA. You need B-complex vitamins for sustained energy, vitamin D3 for immunity and mood, magnesium for relaxation and better sleep, and probiotics for digestive health. These essentials will help you feel your best."
      }
    }
    
    // BUSCA INTELIGENTE DE PRODUTOS
    console.log('üöÄ Iniciando busca inteligente de produtos...')
    
    let recommendedProducts = await searchProductsSmart(analysis, 6)
    
    // Se n√£o encontrou produtos, gerar produtos baseados no diagn√≥stico da IA
    if (!recommendedProducts || recommendedProducts.length === 0) {
      console.log('üì¶ Gerando produtos baseados no diagn√≥stico da IA...')
      
      // Extrair necessidades do diagn√≥stico da IA
      const needs = extractNeedsFromAnalysis(analysis);
      recommendedProducts = generateProductsFromNeeds(needs);
    }
    
    // Enriquecer produtos com informa√ß√µes adicionais
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    recommendedProducts = recommendedProducts.map((product: any, index) => ({
      name: product.name,
      description: generateProductDescription(product.name, language),
      asin: product.asin,
      price: product.price,
      rating: product.rating || 4.0,
      category: identifyCategory(product.name),
      benefits: generateBenefits(product.name, language),
      amazonUrl: `https://meuportalfit.com/link/${product.asin}`,
      detailPageURL: `https://meuportalfit.com/link/${product.asin}`, // Adicionar campo detailPageURL
      source: 'amazon-dynamic', // Adicionar campo source
      savings: Math.floor(Math.random() * 20) + 15, // 15-35% economia
      imageUrl: product.imageUrl || '',
      featured: index === 0,
      shortUrl: `amazon.com/dp/${product.asin}` // URL limpa para exibi√ß√£o
    }))
    
    console.log(`‚úÖ Total de ${recommendedProducts.length} produtos processados`)
    
    // Calcular resumo
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
const totalSavings = recommendedProducts.reduce((sum: number, product: any) => {
  const price = parseFloat(product.price.replace('$', '').replace(',', ''))
  return sum + (price * product.savings / 100)
}, 0)

const budgetAnswer = answers[3] || 1
const budgetMap = ['budget', 'moderate', 'priority', 'premium', 'unlimited']
const budget = budgetMap[budgetAnswer] || 'moderate'

// Extrair orienta√ß√µes pr√°ticas da an√°lise da Dra. Ana Slim
const extractPracticalGuidance = (analysis: string): string => {
  console.log('üîç Extraindo orienta√ß√µes pr√°ticas da an√°lise...')
  console.log('üìù An√°lise completa:', analysis.substring(0, 200) + '...')
  
  // Procurar por se√ß√µes de orienta√ß√µes pr√°ticas na an√°lise
  const guidanceMatch = analysis.match(/\*\*Solu√ß√µes pr√°ticas:\*\*([\s\S]*?)(?=\*\*|$)/i)
  if (guidanceMatch) {
    console.log('‚úÖ Encontrou se√ß√£o "Solu√ß√µes pr√°ticas"')
    return guidanceMatch[1].trim()
  }
  
  // Procurar por outras varia√ß√µes de orienta√ß√µes pr√°ticas
  const variations = [
    /\*\*Orienta√ß√µes pr√°ticas:\*\*([\s\S]*?)(?=\*\*|$)/i,
    /\*\*Dicas pr√°ticas:\*\*([\s\S]*?)(?=\*\*|$)/i,
    /\*\*Recomenda√ß√µes:\*\*([\s\S]*?)(?=\*\*|$)/i,
    /\*\*A√ß√µes pr√°ticas:\*\*([\s\S]*?)(?=\*\*|$)/i
  ]
  
  for (const variation of variations) {
    const match = analysis.match(variation)
    if (match) {
      console.log('‚úÖ Encontrou orienta√ß√µes com varia√ß√£o')
      return match[1].trim()
    }
  }
  
  // Fallback: procurar por listas com bullet points
  const bulletMatch = analysis.match(/- \*\*(.*?)\*\*/g)
  if (bulletMatch && bulletMatch.length >= 2) {
    console.log('‚úÖ Encontrou lista com bullet points')
    return bulletMatch.map(bullet => bullet.replace(/^- \*\*(.*?)\*\*/, '**$1**')).join('\n')
  }
  
  // Procurar por linhas que come√ßam com ** (t√≠tulos em negrito)
  const boldLines = analysis.match(/\*\*[^*]+\*\*/g)
  if (boldLines && boldLines.length >= 3) {
    console.log('‚úÖ Encontrou linhas em negrito')
    return boldLines.slice(0, 5).join('\n')
  }
  
  // CORRE√á√ÉO: Se n√£o encontrar orienta√ß√µes espec√≠ficas, retornar a an√°lise completa
  console.log('‚ö†Ô∏è Usando an√°lise completa como fallback')
  return analysis
}

return NextResponse.json({
  success: true,
  analysis,
  orientacoes: extractPracticalGuidance(analysis), // Adicionar orienta√ß√µes pr√°ticas
  profile: {
    language,
    budget,
    totalQuestions: Object.keys(answers).length
  },
  recommendations: recommendedProducts,
  summary: {
    totalProducts: recommendedProducts.length,
    totalSavings: Math.round(totalSavings),
    averageRating: recommendedProducts.length > 0 
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ? recommendedProducts.reduce((sum: number, p: any) => sum + p.rating, 0) / recommendedProducts.length
      : 0  // <-- ESTA √â A MUDAN√áA IMPORTANTE
  }
})

  } catch (error) {
    console.error('Erro na an√°lise:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' }, 
      { status: 500 }
    )
  }
}